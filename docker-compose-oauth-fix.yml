services:
  toolarr:
    image: 192.168.45.15:5000/toolarr:latest
    environment:
      TOOL_API_KEY: ${TOOL_API_KEY:-changeme}
      MCP_CLIENT_ID: ${MCP_CLIENT_ID:-toolarr-client}
      MCP_CLIENT_SECRET: ${MCP_CLIENT_SECRET:-changeme}
      SONARR_INSTANCE_1_NAME: ${SONARR_INSTANCE_1_NAME:-sonarr}
      SONARR_INSTANCE_1_URL: ${SONARR_INSTANCE_1_URL:-http://sonarr:8989}
      SONARR_INSTANCE_1_API_KEY: ${SONARR_INSTANCE_1_API_KEY}
      RADARR_INSTANCE_1_NAME: ${RADARR_INSTANCE_1_NAME:-radarr}
      RADARR_INSTANCE_1_URL: ${RADARR_INSTANCE_1_URL:-http://radarr:7878}
      RADARR_INSTANCE_1_API_KEY: ${RADARR_INSTANCE_1_API_KEY}
    
    networks:
      - traefik_public
      
    deploy:
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.toolarr.rule=Host(`toolarr.domain.us`)"
        - "traefik.http.routers.toolarr.entrypoints=websecure"
        - "traefik.http.services.toolarr.loadbalancer.server.port=8000"
        
        # Middleware to preserve Authorization header
        - "traefik.http.middlewares.toolarr-auth.headers.customrequestheaders.X-Forwarded-Authorization=%%{http_authorization}"
        - "traefik.http.middlewares.toolarr-cors.headers.accesscontrolallowheaders=Authorization,Content-Type,X-Requested-With"
        - "traefik.http.middlewares.toolarr-cors.headers.accesscontrolallowmethods=GET,POST,PUT,DELETE,OPTIONS,HEAD"
        - "traefik.http.middlewares.toolarr-cors.headers.accesscontrolalloworigin=*"
        - "traefik.http.middlewares.toolarr-cors.headers.accesscontrolmaxage=3600"
        
        # Apply middlewares
        - "traefik.http.routers.toolarr.middlewares=toolarr-auth@docker,toolarr-cors@docker"
        
      mode: global
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3

networks:
  traefik_public:
    external: true