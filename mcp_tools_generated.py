"""
Auto-generated MCP tools from OpenAPI specification
DO NOT EDIT MANUALLY - This file is generated by generate_mcp_tools.py
"""

import os
from typing import Dict, Any, Optional
from fastapi.security import HTTPAuthorizationCredentials
from fastapi import HTTPException

from instance_endpoints import get_sonarr_instance, get_radarr_instance
from mcp_server import mcp_server

def create_instance_schema(required: bool = False) -> Dict[str, Any]:
    """Create schema for instance_name parameter with default guidance"""
    return {
        "type": "string",
        "description": "Instance name (use 'default' for the primary instance unless specifically told otherwise)",
        "default": "default"
    }

async def register_sonarr_tools():
    """Register all Sonarr tools with the MCP server"""
    
    # Import Sonarr functions
    from sonarr import (
        get_episodes, lookup_series, add_series, get_download_queue, 
        get_download_history, delete_from_queue, get_quality_profiles, 
        find_series_with_tags, update_series_properties, delete_series, 
        delete_episode, fix_series, search_series
    )
    
    # Retrieves all episodes for a given series. Use 'default' ins...
    mcp_server.register_tool(
        "get_sonarr_episodes",
        "Retrieves all episodes for a given series. Use 'default' instance unless specified.",
        {
        "type": "object",
        "properties": {
                "instance_name": {
                        "type": "string",
                        "description": "Instance name (use 'default' for the primary instance unless specifically told otherwise)",
                        "default": "default"
                },
                "series_id": {
                        "type": "integer",
                        "description": ""
                }
        },
        "required": [
                "series_id"
        ]
},
        lambda args, auth: get_episodes(
            get_sonarr_instance(args.get("instance_name", "default")),
            *[args.get(param) for param in ['instance_name', 'series_id'] if param != "instance_name"]
        )
    )
    
    # Deletes a specific episode file. Use 'default' instance unle...
    mcp_server.register_tool(
        "delete_sonarr_episode",
        "Deletes a specific episode file. Use 'default' instance unless specified.",
        {
        "type": "object",
        "properties": {
                "instance_name": {
                        "type": "string",
                        "description": "Instance name (use 'default' for the primary instance unless specifically told otherwise)",
                        "default": "default"
                },
                "series_id": {
                        "type": "integer",
                        "description": ""
                },
                "season_number": {
                        "type": "integer",
                        "description": ""
                },
                "episode_number": {
                        "type": "integer",
                        "description": ""
                }
        },
        "required": [
                "series_id",
                "season_number",
                "episode_number"
        ]
},
        lambda args, auth: delete_sonarr_episode(
            get_sonarr_instance(args.get("instance_name", "default")),
            *[args.get(param) for param in ['instance_name', 'series_id', 'season_number', 'episode_number'] if param != "instance_name"]
        )
    )
    
    # Searches for a new series by a search term. This is the firs...
    mcp_server.register_tool(
        "lookup_series_sonarr",
        "Searches for a new series by a search term. This is the first step to add a new series. Use 'default' instance unless specified.",
        {
        "type": "object",
        "properties": {
                "instance_name": {
                        "type": "string",
                        "description": "Instance name (use 'default' for the primary instance unless specifically told otherwise)",
                        "default": "default"
                },
                "term": {
                        "type": "string",
                        "description": ""
                }
        },
        "required": [
                "term"
        ]
},
        lambda args, auth: lookup_series(
            get_sonarr_instance(args.get("instance_name", "default")),
            *[args.get(param) for param in ['instance_name', 'term'] if param != "instance_name"]
        )
    )
    
    # Adds a new series to Sonarr by looking it up via its TVDB ID...
    mcp_server.register_tool(
        "add_series_sonarr",
        "Adds a new series to Sonarr by looking it up via its TVDB ID. Use 'default' instance unless specified.",
        {
        "type": "object",
        "properties": {
                "instance_name": {
                        "type": "string",
                        "description": "Instance name (use 'default' for the primary instance unless specifically told otherwise)",
                        "default": "default"
                }
        },
        "required": []
},
        lambda args, auth: add_series(
            get_sonarr_instance(args.get("instance_name", "default")),
            *[args.get(param) for param in ['instance_name'] if param != "instance_name"]
        )
    )
    
    # Gets the list of items currently being downloaded by Sonarr....
    mcp_server.register_tool(
        "get_download_queue_sonarr",
        "Gets the list of items currently being downloaded by Sonarr. Use 'default' instance unless specified.",
        {
        "type": "object",
        "properties": {
                "instance_name": {
                        "type": "string",
                        "description": "Instance name (use 'default' for the primary instance unless specifically told otherwise)",
                        "default": "default"
                }
        },
        "required": []
},
        lambda args, auth: get_download_queue(
            get_sonarr_instance(args.get("instance_name", "default")),
            *[args.get(param) for param in ['instance_name'] if param != "instance_name"]
        )
    )
    
    # Gets the history of recently grabbed and imported downloads ...
    mcp_server.register_tool(
        "get_download_history_sonarr",
        "Gets the history of recently grabbed and imported downloads from Sonarr. Use 'default' instance unless specified.",
        {
        "type": "object",
        "properties": {
                "instance_name": {
                        "type": "string",
                        "description": "Instance name (use 'default' for the primary instance unless specifically told otherwise)",
                        "default": "default"
                }
        },
        "required": []
},
        lambda args, auth: get_download_history(
            get_sonarr_instance(args.get("instance_name", "default")),
            *[args.get(param) for param in ['instance_name'] if param != "instance_name"]
        )
    )
    
    # Deletes an item from the Sonarr download queue. Use 'default...
    mcp_server.register_tool(
        "delete_sonarr_queue_item",
        "Deletes an item from the Sonarr download queue. Use 'default' instance unless specified.",
        {
        "type": "object",
        "properties": {
                "instance_name": {
                        "type": "string",
                        "description": "Instance name (use 'default' for the primary instance unless specifically told otherwise)",
                        "default": "default"
                },
                "queue_id": {
                        "type": "integer",
                        "description": ""
                },
                "removeFromClient": {
                        "type": "boolean",
                        "description": "",
                        "default": True
                }
        },
        "required": [
                "queue_id"
        ]
},
        lambda args, auth: delete_from_queue(
            get_sonarr_instance(args.get("instance_name", "default")),
            *[args.get(param) for param in ['instance_name', 'queue_id', 'removeFromClient'] if param != "instance_name"]
        )
    )
    
    # Retrieves quality profiles for TV SHOWS configured in Sonarr...
    mcp_server.register_tool(
        "get_quality_profiles_sonarr",
        "Retrieves quality profiles for TV SHOWS configured in Sonarr. Use 'default' instance unless specified.",
        {
        "type": "object",
        "properties": {
                "instance_name": {
                        "type": "string",
                        "description": "Instance name (use 'default' for the primary instance unless specifically told otherwise)",
                        "default": "default"
                }
        },
        "required": []
},
        lambda args, auth: get_quality_profiles(
            get_sonarr_instance(args.get("instance_name", "default")),
            *[args.get(param) for param in ['instance_name'] if param != "instance_name"]
        )
    )
    
    # Get all configured root folders in Sonarr. Use 'default' ins...
    mcp_server.register_tool(
        "get_sonarr_rootfolders",
        "Get all configured root folders in Sonarr. Use 'default' instance unless specified.",
        {
        "type": "object",
        "properties": {
                "instance_name": {
                        "type": "string",
                        "description": "Instance name (use 'default' for the primary instance unless specifically told otherwise)",
                        "default": "default"
                }
        },
        "required": []
},
        lambda args, auth: get_sonarr_rootfolders(
            get_sonarr_instance(args.get("instance_name", "default")),
            *[args.get(param) for param in ['instance_name'] if param != "instance_name"]
        )
    )
    
    # Searches the Sonarr library for TV shows and returns detaile...
    mcp_server.register_tool(
        "series_with_tags",
        "Searches the Sonarr library for TV shows and returns detailed results including tag names. Use this endpoint to find a series\' ID for other operations. Use 'default' instance unless specified.",
        {
        "type": "object",
        "properties": {
                "instance_name": {
                        "type": "string",
                        "description": "Instance name (use 'default' for the primary instance unless specifically told otherwise)",
                        "default": "default"
                },
                "term": {
                        "type": "string",
                        "description": ""
                }
        },
        "required": [
                "term"
        ]
},
        lambda args, auth: find_series_with_tags(
            get_sonarr_instance(args.get("instance_name", "default")),
            *[args.get(param) for param in ['instance_name', 'term'] if param != "instance_name"]
        )
    )
    
    # Get all tags configured in Sonarr. Use 'default' instance un...
    mcp_server.register_tool(
        "sonarr_get_tags",
        "Get all tags configured in Sonarr. Use 'default' instance unless specified.",
        {
        "type": "object",
        "properties": {
                "instance_name": {
                        "type": "string",
                        "description": "Instance name (use 'default' for the primary instance unless specifically told otherwise)",
                        "default": "default"
                }
        },
        "required": []
},
        lambda args, auth: sonarr_get_tags(
            get_sonarr_instance(args.get("instance_name", "default")),
            *[args.get(param) for param in ['instance_name'] if param != "instance_name"]
        )
    )
    
    # Updates series properties. To remove a tag, get the series\'...
    mcp_server.register_tool(
        "update_sonarr_series_properties",
        "Updates series properties. To remove a tag, get the series\'s current tags, then submit a new list of tags that excludes the one to be removed. This replaces the entire list of tags for the series. Use 'default' instance unless specified.",
        {
        "type": "object",
        "properties": {
                "instance_name": {
                        "type": "string",
                        "description": "Instance name (use 'default' for the primary instance unless specifically told otherwise)",
                        "default": "default"
                },
                "series_id": {
                        "type": "integer",
                        "description": ""
                }
        },
        "required": [
                "series_id"
        ]
},
        lambda args, auth: update_series_properties(
            get_sonarr_instance(args.get("instance_name", "default")),
            *[args.get(param) for param in ['instance_name', 'series_id'] if param != "instance_name"]
        )
    )
    
    # Deletes a whole series. Use 'default' instance unless specif...
    mcp_server.register_tool(
        "delete_sonarr_series",
        "Deletes a whole series. Use 'default' instance unless specified.",
        {
        "type": "object",
        "properties": {
                "instance_name": {
                        "type": "string",
                        "description": "Instance name (use 'default' for the primary instance unless specifically told otherwise)",
                        "default": "default"
                },
                "series_id": {
                        "type": "integer",
                        "description": ""
                },
                "deleteFiles": {
                        "type": "boolean",
                        "description": "",
                        "default": True
                },
                "addImportExclusion": {
                        "type": "boolean",
                        "description": "",
                        "default": False
                }
        },
        "required": [
                "series_id"
        ]
},
        lambda args, auth: delete_sonarr_series(
            get_sonarr_instance(args.get("instance_name", "default")),
            *[args.get(param) for param in ['instance_name', 'series_id', 'deleteFiles', 'addImportExclusion'] if param != "instance_name"]
        )
    )
    
    # Triggers a search for all episodes of a series. Use 'default...
    mcp_server.register_tool(
        "series_search",
        "Triggers a search for all episodes of a series. Use 'default' instance unless specified.",
        {
        "type": "object",
        "properties": {
                "instance_name": {
                        "type": "string",
                        "description": "Instance name (use 'default' for the primary instance unless specifically told otherwise)",
                        "default": "default"
                },
                "series_id": {
                        "type": "integer",
                        "description": ""
                }
        },
        "required": [
                "series_id"
        ]
},
        lambda args, auth: series_search(
            get_sonarr_instance(args.get("instance_name", "default")),
            *[args.get(param) for param in ['instance_name', 'series_id'] if param != "instance_name"]
        )
    )
    
    # Trigger a search for an individual episode without deleting ...
    mcp_server.register_tool(
        "search_sonarr_episode",
        "Trigger a search for an individual episode without deleting existing files. Use 'default' instance unless specified.",
        {
        "type": "object",
        "properties": {
                "instance_name": {
                        "type": "string",
                        "description": "Instance name (use 'default' for the primary instance unless specifically told otherwise)",
                        "default": "default"
                },
                "series_id": {
                        "type": "integer",
                        "description": ""
                },
                "episode_id": {
                        "type": "integer",
                        "description": ""
                }
        },
        "required": [
                "series_id",
                "episode_id"
        ]
},
        lambda args, auth: search_sonarr_episode(
            get_sonarr_instance(args.get("instance_name", "default")),
            *[args.get(param) for param in ['instance_name', 'series_id', 'episode_id'] if param != "instance_name"]
        )
    )
    
    # Deletes, re-adds, and searches for a series. WARNING: This i...
    mcp_server.register_tool(
        "fix_sonarr_series",
        "Deletes, re-adds, and searches for a series. WARNING: This is a destructive action. For routine quality upgrades, use the \'/series/{series_id}/search\' endpoint instead. Use 'default' instance unless specified.",
        {
        "type": "object",
        "properties": {
                "instance_name": {
                        "type": "string",
                        "description": "Instance name (use 'default' for the primary instance unless specifically told otherwise)",
                        "default": "default"
                },
                "series_id": {
                        "type": "integer",
                        "description": ""
                }
        },
        "required": [
                "series_id"
        ]
},
        lambda args, auth: fix_sonarr_series(
            get_sonarr_instance(args.get("instance_name", "default")),
            *[args.get(param) for param in ['instance_name', 'series_id'] if param != "instance_name"]
        )
    )
    
    # Triggers a search for all episodes within a season. Use 'def...
    mcp_server.register_tool(
        "season_search",
        "Triggers a search for all episodes within a season. Use 'default' instance unless specified.",
        {
        "type": "object",
        "properties": {
                "instance_name": {
                        "type": "string",
                        "description": "Instance name (use 'default' for the primary instance unless specifically told otherwise)",
                        "default": "default"
                },
                "series_id": {
                        "type": "integer",
                        "description": ""
                },
                "season_number": {
                        "type": "integer",
                        "description": ""
                }
        },
        "required": [
                "series_id",
                "season_number"
        ]
},
        lambda args, auth: season_search(
            get_sonarr_instance(args.get("instance_name", "default")),
            *[args.get(param) for param in ['instance_name', 'series_id', 'season_number'] if param != "instance_name"]
        )
    )
    

async def register_radarr_tools():
    """Register all Radarr tools with the MCP server"""
    
    # Import Radarr functions
    from radarr import (
        lookup_movie, add_movie, get_download_queue as get_radarr_queue, 
        get_download_history as get_radarr_history, delete_from_queue as delete_radarr_queue_item, 
        update_movie, delete_movie, get_quality_profiles as get_radarr_quality_profiles,
        get_root_folders, fix_movie
    )
    
    # Triggers a search for a movie to find a better quality versi...
    mcp_server.register_tool(
        "search_for_movie_upgrade",
        "Triggers a search for a movie to find a better quality version. This is a non-destructive action. Use 'default' instance unless specified.",
        {
        "type": "object",
        "properties": {
                "instance_name": {
                        "type": "string",
                        "description": "Instance name (use 'default' for the primary instance unless specifically told otherwise)",
                        "default": "default"
                },
                "movie_id": {
                        "type": "integer",
                        "description": ""
                }
        },
        "required": [
                "movie_id"
        ]
},
        lambda args, auth: search_for_movie_upgrade(
            get_radarr_instance(args.get("instance_name", "default")),
            *[args.get(param) for param in ['instance_name', 'movie_id'] if param != "instance_name"]
        )
    )
    
    # Searches for a new movie by a search term. This is the first...
    mcp_server.register_tool(
        "lookup_movie_radarr",
        "Searches for a new movie by a search term. This is the first step to add a new movie. Use 'default' instance unless specified.",
        {
        "type": "object",
        "properties": {
                "instance_name": {
                        "type": "string",
                        "description": "Instance name (use 'default' for the primary instance unless specifically told otherwise)",
                        "default": "default"
                },
                "term": {
                        "type": "string",
                        "description": ""
                }
        },
        "required": [
                "term"
        ]
},
        lambda args, auth: lookup_movie(
            get_radarr_instance(args.get("instance_name", "default")),
            *[args.get(param) for param in ['instance_name', 'term'] if param != "instance_name"]
        )
    )
    
    # Adds a new movie to Radarr by looking it up via its TMDB ID....
    mcp_server.register_tool(
        "add_movie_radarr",
        "Adds a new movie to Radarr by looking it up via its TMDB ID. Use 'default' instance unless specified.",
        {
        "type": "object",
        "properties": {
                "instance_name": {
                        "type": "string",
                        "description": "Instance name (use 'default' for the primary instance unless specifically told otherwise)",
                        "default": "default"
                }
        },
        "required": []
},
        lambda args, auth: add_movie(
            get_radarr_instance(args.get("instance_name", "default")),
            *[args.get(param) for param in ['instance_name'] if param != "instance_name"]
        )
    )
    
    # Gets the list of items currently being downloaded by Radarr....
    mcp_server.register_tool(
        "get_download_queue_radarr",
        "Gets the list of items currently being downloaded by Radarr. Use 'default' instance unless specified.",
        {
        "type": "object",
        "properties": {
                "instance_name": {
                        "type": "string",
                        "description": "Instance name (use 'default' for the primary instance unless specifically told otherwise)",
                        "default": "default"
                }
        },
        "required": []
},
        lambda args, auth: get_download_queue(
            get_radarr_instance(args.get("instance_name", "default")),
            *[args.get(param) for param in ['instance_name'] if param != "instance_name"]
        )
    )
    
    # Gets the history of recently grabbed and imported downloads ...
    mcp_server.register_tool(
        "get_download_history_radarr",
        "Gets the history of recently grabbed and imported downloads from Radarr. Use 'default' instance unless specified.",
        {
        "type": "object",
        "properties": {
                "instance_name": {
                        "type": "string",
                        "description": "Instance name (use 'default' for the primary instance unless specifically told otherwise)",
                        "default": "default"
                }
        },
        "required": []
},
        lambda args, auth: get_download_history(
            get_radarr_instance(args.get("instance_name", "default")),
            *[args.get(param) for param in ['instance_name'] if param != "instance_name"]
        )
    )
    
    # Deletes an item from the Radarr download queue. Use 'default...
    mcp_server.register_tool(
        "delete_radarr_queue_item",
        "Deletes an item from the Radarr download queue. Use 'default' instance unless specified.",
        {
        "type": "object",
        "properties": {
                "instance_name": {
                        "type": "string",
                        "description": "Instance name (use 'default' for the primary instance unless specifically told otherwise)",
                        "default": "default"
                },
                "queue_id": {
                        "type": "integer",
                        "description": ""
                },
                "removeFromClient": {
                        "type": "boolean",
                        "description": "",
                        "default": True
                }
        },
        "required": [
                "queue_id"
        ]
},
        lambda args, auth: delete_from_queue(
            get_radarr_instance(args.get("instance_name", "default")),
            *[args.get(param) for param in ['instance_name', 'queue_id', 'removeFromClient'] if param != "instance_name"]
        )
    )
    
    # Updates movie properties. To remove a tag, get the movie\'s ...
    mcp_server.register_tool(
        "update_radarr_movie_properties",
        "Updates movie properties. To remove a tag, get the movie\'s current tags, then submit a new list of tags that excludes the one to be removed. This replaces the entire list of tags for the movie. Use 'default' instance unless specified.",
        {
        "type": "object",
        "properties": {
                "instance_name": {
                        "type": "string",
                        "description": "Instance name (use 'default' for the primary instance unless specifically told otherwise)",
                        "default": "default"
                },
                "movie_id": {
                        "type": "integer",
                        "description": ""
                }
        },
        "required": [
                "movie_id"
        ]
},
        lambda args, auth: update_movie(
            get_radarr_instance(args.get("instance_name", "default")),
            *[args.get(param) for param in ['instance_name', 'movie_id'] if param != "instance_name"]
        )
    )
    
    # Deletes a movie from Radarr. To re-download, you must re-add...
    mcp_server.register_tool(
        "delete_radarr_movie",
        "Deletes a movie from Radarr. To re-download, you must re-add the movie. Use 'default' instance unless specified.",
        {
        "type": "object",
        "properties": {
                "instance_name": {
                        "type": "string",
                        "description": "Instance name (use 'default' for the primary instance unless specifically told otherwise)",
                        "default": "default"
                },
                "movie_id": {
                        "type": "integer",
                        "description": ""
                },
                "deleteFiles": {
                        "type": "boolean",
                        "description": "",
                        "default": True
                },
                "addImportExclusion": {
                        "type": "boolean",
                        "description": "",
                        "default": False
                }
        },
        "required": [
                "movie_id"
        ]
},
        lambda args, auth: delete_movie(
            get_radarr_instance(args.get("instance_name", "default")),
            *[args.get(param) for param in ['instance_name', 'movie_id', 'deleteFiles', 'addImportExclusion'] if param != "instance_name"]
        )
    )
    
    # Retrieves quality profiles for MOVIES configured in Radarr. ...
    mcp_server.register_tool(
        "get_quality_profiles_radarr",
        "Retrieves quality profiles for MOVIES configured in Radarr. Use 'default' instance unless specified.",
        {
        "type": "object",
        "properties": {
                "instance_name": {
                        "type": "string",
                        "description": "Instance name (use 'default' for the primary instance unless specifically told otherwise)",
                        "default": "default"
                }
        },
        "required": []
},
        lambda args, auth: get_quality_profiles(
            get_radarr_instance(args.get("instance_name", "default")),
            *[args.get(param) for param in ['instance_name'] if param != "instance_name"]
        )
    )
    
    # Get all configured root folders in Radarr. Use 'default' ins...
    mcp_server.register_tool(
        "get_radarr_rootfolders",
        "Get all configured root folders in Radarr. Use 'default' instance unless specified.",
        {
        "type": "object",
        "properties": {
                "instance_name": {
                        "type": "string",
                        "description": "Instance name (use 'default' for the primary instance unless specifically told otherwise)",
                        "default": "default"
                }
        },
        "required": []
},
        lambda args, auth: get_root_folders(
            get_radarr_instance(args.get("instance_name", "default")),
            *[args.get(param) for param in ['instance_name'] if param != "instance_name"]
        )
    )
    
    # Get all tags configured in Radarr. Use 'default' instance un...
    mcp_server.register_tool(
        "radarr_get_tags",
        "Get all tags configured in Radarr. Use 'default' instance unless specified.",
        {
        "type": "object",
        "properties": {
                "instance_name": {
                        "type": "string",
                        "description": "Instance name (use 'default' for the primary instance unless specifically told otherwise)",
                        "default": "default"
                }
        },
        "required": []
},
        lambda args, auth: radarr_get_tags(
            get_radarr_instance(args.get("instance_name", "default")),
            *[args.get(param) for param in ['instance_name'] if param != "instance_name"]
        )
    )
    
    # Deletes, re-adds, and searches for a movie. WARNING: This is...
    mcp_server.register_tool(
        "fix_radarr_movie",
        "Deletes, re-adds, and searches for a movie. WARNING: This is a destructive action. For routine quality upgrades, use the \'/movie/{movie_id}/search\' endpoint instead. Use 'default' instance unless specified.",
        {
        "type": "object",
        "properties": {
                "instance_name": {
                        "type": "string",
                        "description": "Instance name (use 'default' for the primary instance unless specifically told otherwise)",
                        "default": "default"
                },
                "movie_id": {
                        "type": "integer",
                        "description": ""
                }
        },
        "required": [
                "movie_id"
        ]
},
        lambda args, auth: fix_movie(
            get_radarr_instance(args.get("instance_name", "default")),
            *[args.get(param) for param in ['instance_name', 'movie_id'] if param != "instance_name"]
        )
    )
    

async def register_instance_tools():
    """Register instance management tools"""
    
    async def list_sonarr_instances_handler(args: Dict[str, Any], auth: HTTPAuthorizationCredentials):
        """List all configured Sonarr instances"""
        instances = []
        i = 1
        while True:
            name = os.environ.get(f"SONARR_INSTANCE_{i}_NAME")
            if not name:
                break
            url = os.environ.get(f"SONARR_INSTANCE_{i}_URL")
            if url:
                instances.append({"name": name, "url": url})
            i += 1
        return instances
    
    async def list_radarr_instances_handler(args: Dict[str, Any], auth: HTTPAuthorizationCredentials):
        """List all configured Radarr instances"""
        instances = []
        i = 1
        while True:
            name = os.environ.get(f"RADARR_INSTANCE_{i}_NAME")
            if not name:
                break
            url = os.environ.get(f"RADARR_INSTANCE_{i}_URL")
            if url:
                instances.append({"name": name, "url": url})
            i += 1
        return instances
    
    mcp_server.register_tool(
        "list_sonarr_instances",
        "List all configured Sonarr instances",
        {"type": "object", "properties": {}},
        list_sonarr_instances_handler
    )
    
    mcp_server.register_tool(
        "list_radarr_instances", 
        "List all configured Radarr instances",
        {"type": "object", "properties": {}},
        list_radarr_instances_handler
    )

async def register_all_tools():
    """Register all MCP tools"""
    await register_sonarr_tools()
    await register_radarr_tools()
    await register_instance_tools()
